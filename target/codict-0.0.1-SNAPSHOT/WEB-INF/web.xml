<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">

	<welcome-file-list>
		<welcome-file>index.html</welcome-file>
		<welcome-file>index.htm</welcome-file>
		<welcome-file>index.jsp</welcome-file>
		<welcome-file>default.html</welcome-file>
		<welcome-file>default.htm</welcome-file>
		<welcome-file>default.jsp</welcome-file>
	</welcome-file-list>


	<!-- This servlet creates spring contexts that requires .xml file to create 
		beans. dispatcher-servlet.xml -->
	<!-- It is possible to create all beans in dispatcher-servlet, but It is 
		not the best practise -->
	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<!-- Some beans should be in ContextLoaderListener instead of dispatcher-servlet -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>

	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<!-- For this extensions, it will be registered by DispatcherServlet and 
			return something. -->
		<!-- For */example says only for ...../example will run DispatcherServlet -->
		<url-pattern>*.html</url-pattern>
		<url-pattern>*.htm</url-pattern>
		<url-pattern>*.json</url-pattern>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>

	<!-- From Security Namespace Configuration , Referance Book -->
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>

	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- To Avoid XSS attacks -->
	<context-param>
		<param-name>defaultHtmlEscape</param-name>
		<param-value>true</param-value>
	</context-param>

	<!-- Default profile will be production so we wont change anything in heroku 
		side. -->
	<!-- In order to run it in development profile, write 
	-Dspring.profiles.active = "dev" 
	in maven build JRE/VM arguments -->
	<context-param>
		<param-name>spring.profiles.default</param-name>
		<param-value>prod</param-value>
	</context-param>

</web-app>